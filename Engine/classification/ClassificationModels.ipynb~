{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "<h2>Import Libs</h2>"
      ],
      "metadata": {
        "id": "EVcmuejZq1y-"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "pN4kzB1TqVie"
      },
      "outputs": [],
      "source": [
        "# working with the data and vizualization tools\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# pre- processing\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# K-cross validation\n",
        "from sklearn.model_selection import train_test_split, KFold, GridSearchCV\n",
        "\n",
        "# classification models\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn import svm\n",
        "\n",
        "# Dimensionality Reduction\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.manifold import TSNE\n",
        "\n",
        "# model evaluation\n",
        "from sklearn.metrics import plot_confusion_matrix, confusion_matrix\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# seed\n",
        "RSEED = 10\n",
        "\n",
        "#saving models as plk files\n",
        "from joblib import Parallel, delayed\n",
        "import joblib"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Printing configuration"
      ],
      "metadata": {
        "id": "6zHDrl3CsF7O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#print float number with 6 digit after the decimal point\n",
        "pd.set_option('display.float_format', lambda x: '%.6f' % x)"
      ],
      "metadata": {
        "id": "RoNYML3bsKqG"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# helper functions\n",
        "\n",
        "def k_cross_validation(x_features, y_label, k):\n",
        "  \"\"\"\n",
        "  create 10 varsions of the train-test data with ratio of 90:10\n",
        "  \"\"\"\n",
        "  # Split the dataset into 10 folds\n",
        "  kf = KFold(n_splits=k, shuffle=True)\n",
        "  # k-cross validation splits list\n",
        "  kcv_list = []\n",
        "\n",
        "  # Iterate through the folds\n",
        "  for train_index, test_index in kf.split(x_features):\n",
        "      # Split the train and test sets\n",
        "      print(train_index)\n",
        "      X_train, X_test = x_features.iloc[train_index,:], x_features.iloc[test_index,:]\n",
        "      y_train, y_test = y_label.iloc[train_index], y_label.iloc[test_index]\n",
        "      batch = [X_train, y_train, X_test, y_test]\n",
        "      kcv_list.append(batch)\n",
        "  return kcv_list"
      ],
      "metadata": {
        "id": "AIaR7rl55ytY"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h2>Data pre-processing and visualization</h2>"
      ],
      "metadata": {
        "id": "HWbXAIQ7sywi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "docs_df = pd.read_csv(\"../ClassificationModelsDatasets/Concatenated-DF.csv\")"
      ],
      "metadata": {
        "id": "EajRm6SZs420"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "docs_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "id": "xJZ0BDkItSJM",
        "outputId": "8e35827e-85ff-4f9a-ac0e-432b090497fe"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Unnamed: 0  bibliometr  analysi  explain  artifici  intellig    field  \\\n",
              "0            0    0.000000 0.000000 0.000000  0.000000  0.000000 0.000000   \n",
              "1            1    0.000000 0.115750 0.000000  0.000000  0.000000 0.154671   \n",
              "2            2    0.000000 0.115750 0.000000  0.000000  0.000000 0.245148   \n",
              "3            3    0.000000 0.000000 0.000000  0.000000  0.000000 0.000000   \n",
              "4            4    0.000000 0.000000 0.000000  0.000000  0.000000 0.000000   \n",
              "..         ...         ...      ...      ...       ...       ...      ...   \n",
              "95          95    0.000000 0.000000 0.000000  0.000000  0.000000 0.000000   \n",
              "96          96    0.000000 0.146061 0.000000  0.000000  0.000000 0.309343   \n",
              "97          97    1.596030 0.000000 0.000000  0.000000  0.000000 0.245148   \n",
              "98          98    0.000000 0.000000 0.000000  0.000000  0.000000 0.000000   \n",
              "99          99    0.000000 0.115750 0.000000  0.000000  0.000000 0.154671   \n",
              "\n",
              "       jose   alonso     ciro  ...  dittrich  geppert  448â€“461     sluy  \\\n",
              "0  0.000000 0.000000 0.000000  ...  0.000000 0.000000   0.000000 0.000000   \n",
              "1  0.000000 0.000000 0.000000  ...  0.000000 0.000000   0.000000 0.000000   \n",
              "2  0.000000 0.000000 0.000000  ...  0.000000 0.000000   0.000000 0.000000   \n",
              "3  0.000000 0.000000 0.000000  ...  0.000000 0.000000   0.000000 0.000000   \n",
              "4  0.000000 0.000000 0.000000  ...  0.000000 0.000000   0.000000 0.000000   \n",
              "..      ...      ...      ...  ...       ...      ...        ...      ...   \n",
              "95 0.000000 0.000000 0.000000  ...  0.000000 0.000000   0.000000 0.000000   \n",
              "96 0.000000 0.000000 0.000000  ...  0.000000 0.000000   0.000000 0.000000   \n",
              "97 0.000000 0.000000 0.000000  ...  0.000000 0.000000   0.000000 0.000000   \n",
              "98 0.000000 0.000000 0.000000  ...  0.000000 0.000000   0.000000 0.000000   \n",
              "99 0.000000 0.000000 0.000000  ...  0.000000 0.000000   0.000000 0.000000   \n",
              "\n",
              "     remesh   strain   asolid  447â€“467  08468stat  Y-LABEL  \n",
              "0  0.000000 0.000000 0.000000   0.000000   0.000000        0  \n",
              "1  0.000000 0.000000 0.000000   0.000000   0.000000        0  \n",
              "2  0.000000 0.000000 0.000000   0.000000   0.000000        1  \n",
              "3  0.000000 0.000000 0.000000   0.000000   0.000000        0  \n",
              "4  0.000000 0.000000 0.000000   0.000000   0.000000        0  \n",
              "..      ...      ...      ...        ...        ...      ...  \n",
              "95 0.000000 0.000000 0.000000   0.000000   0.000000        0  \n",
              "96 0.000000 0.000000 0.000000   0.000000   0.000000        1  \n",
              "97 0.000000 0.000000 0.000000   0.000000   0.000000        0  \n",
              "98 0.000000 0.000000 0.000000   0.000000   0.000000        1  \n",
              "99 0.000000 0.000000 0.000000   0.000000   0.000000        1  \n",
              "\n",
              "[100 rows x 30302 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fd250765-84bf-40da-ba76-89417358a5ea\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>bibliometr</th>\n",
              "      <th>analysi</th>\n",
              "      <th>explain</th>\n",
              "      <th>artifici</th>\n",
              "      <th>intellig</th>\n",
              "      <th>field</th>\n",
              "      <th>jose</th>\n",
              "      <th>alonso</th>\n",
              "      <th>ciro</th>\n",
              "      <th>...</th>\n",
              "      <th>dittrich</th>\n",
              "      <th>geppert</th>\n",
              "      <th>448â€“461</th>\n",
              "      <th>sluy</th>\n",
              "      <th>remesh</th>\n",
              "      <th>strain</th>\n",
              "      <th>asolid</th>\n",
              "      <th>447â€“467</th>\n",
              "      <th>08468stat</th>\n",
              "      <th>Y-LABEL</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.115750</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.154671</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.115750</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.245148</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>95</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>96</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.146061</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.309343</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>97</td>\n",
              "      <td>1.596030</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.245148</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>98</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>99</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.115750</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.154671</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 30302 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fd250765-84bf-40da-ba76-89417358a5ea')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fd250765-84bf-40da-ba76-89417358a5ea button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fd250765-84bf-40da-ba76-89417358a5ea');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# remove first col-(number of row(irrelevant))\n",
        "docs_df= docs_df.iloc[:,1:]"
      ],
      "metadata": {
        "id": "2Q5IQyN0tgoF"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# normalazie the x-features\n",
        "scaler = StandardScaler()\n",
        "x_features = docs_df.iloc[:,0:30089]\n",
        "x_features_scaled = scaler.fit_transform(x_features)\n",
        "\n",
        "# concanted with the y-label\n",
        "scaled_df = np.concatenate((x_features_scaled, docs_df.iloc[:,-1:]), axis=1)"
      ],
      "metadata": {
        "id": "750yoaJct8Fd"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h3>Dimensionality Reduction</h3>\n",
        "After we normalize our data, lets try to extract the relavant features from it by using PCA. It will also help us to visualize our data."
      ],
      "metadata": {
        "id": "CByHf9vXxSVY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# lets choose the create 75 components\n",
        "components = 75\n",
        "\n",
        "pca = PCA(n_components = components)\n",
        "# perform PCA on the scaled data\n",
        "pca.fit(x_features_scaled)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CUOSxMTWuENP",
        "outputId": "794310c6-92a8-412f-cdbc-4e2b0cd87a3b"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PCA(n_components=75)"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# print the explained variances\n",
        "print(\"Variances (Percentage):\")\n",
        "print(pca.explained_variance_ratio_ * 100)\n",
        "print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gL_0Cig1yKQs",
        "outputId": "6c7a3a6b-43ae-4ce8-d5fe-9053e33bfd8d"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Variances (Percentage):\n",
            "[7.57385783 4.44076547 3.73217867 3.42490006 3.24224376 2.86480163\n",
            " 2.44396636 2.29263575 2.16123778 2.03220526 1.90546533 1.88067927\n",
            " 1.85761276 1.76823423 1.71446054 1.52729477 1.48043768 1.45790915\n",
            " 1.39708418 1.37401114 1.32423972 1.30786914 1.29449361 1.27353921\n",
            " 1.26339417 1.25230146 1.23922206 1.22886813 1.21161161 1.15306152\n",
            " 1.12473032 1.10955393 1.06925809 1.05543688 1.01005546 0.98768235\n",
            " 0.95032746 0.94125483 0.91381188 0.89499417 0.87650374 0.85057276\n",
            " 0.8300261  0.81008761 0.77661816 0.76761209 0.7531213  0.74506372\n",
            " 0.72732723 0.71851066 0.6953948  0.67467516 0.66419026 0.65255327\n",
            " 0.64469723 0.62688567 0.60556408 0.60138623 0.57944077 0.56565617\n",
            " 0.55291062 0.54114596 0.53547536 0.52411059 0.51534068 0.51336696\n",
            " 0.49080516 0.48617741 0.47922972 0.46322789 0.45563076 0.44432017\n",
            " 0.43894051 0.42412229 0.41113447]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Cumulative Variances (Percentage):\")\n",
        "print(pca.explained_variance_ratio_.cumsum() * 100)\n",
        "print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dKRe0035yQvs",
        "outputId": "2f128b3b-0f09-4b18-a55b-6d68103cc59e"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cumulative Variances (Percentage):\n",
            "[ 7.57385783 12.01462329 15.74680197 19.17170202 22.41394578 25.27874741\n",
            " 27.72271377 30.01534952 32.1765873  34.20879256 36.11425789 37.99493717\n",
            " 39.85254993 41.62078416 43.3352447  44.86253947 46.34297715 47.8008863\n",
            " 49.19797048 50.57198162 51.89622135 53.20409049 54.4985841  55.77212331\n",
            " 57.03551747 58.28781894 59.527041   60.75590913 61.96752074 63.12058227\n",
            " 64.24531259 65.35486652 66.42412461 67.47956149 68.48961695 69.4772993\n",
            " 70.42762676 71.36888159 72.28269347 73.17768764 74.05419138 74.90476413\n",
            " 75.73479023 76.54487784 77.32149599 78.08910808 78.84222938 79.5872931\n",
            " 80.31462033 81.03313099 81.72852578 82.40320094 83.06739121 83.71994447\n",
            " 84.36464171 84.99152738 85.59709146 86.19847768 86.77791845 87.34357462\n",
            " 87.89648525 88.4376312  88.97310657 89.49721716 90.01255784 90.5259248\n",
            " 91.01672996 91.50290737 91.98213709 92.44536498 92.90099575 93.34531592\n",
            " 93.78425643 94.20837873 94.6195132 ]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# plot a scree plot\n",
        "components = len(pca.explained_variance_ratio_) \\\n",
        "    if components is None else components\n",
        "plt.plot(range(1,components+1),\n",
        "         np.cumsum(pca.explained_variance_ratio_ * 100))\n",
        "plt.xlabel(\"Number of components\")\n",
        "plt.ylabel(\"Explained variance (%)\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "FmwbYtY-yWQQ",
        "outputId": "fd3b90db-36ac-47e0-9470-93cd33144291"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Explained variance (%)')"
            ]
          },
          "metadata": {},
          "execution_count": 47
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "As we can see we can explain about 95% of the varience in the data using 75 principal components. using those 75 components we can train our model\n",
        "using much less features and therefore:\n",
        "- train our models much faster.\n",
        "- avoid to complex model that tend to overfitting."
      ],
      "metadata": {
        "id": "MWu13Vopyemg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# extract 75 PC's from our x-features\n",
        "X_pca = pca.transform(x_features_scaled)\n",
        "print(X_pca.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QQnEBCLFyeNs",
        "outputId": "a74606c2-82d9-41dd-b287-0cbd8b41e5da"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(100, 75)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# concanted with the y-label\n",
        "train_test_data = np.concatenate((X_pca, docs_df.iloc[:,-1:]), axis=1)\n",
        "train_test_data.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IiTFsRxSzuF3",
        "outputId": "669f6494-5d09-4bb0-9f83-fa89c158e2f9"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(100, 76)"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h3>Visualize the data using T-sne</h3>"
      ],
      "metadata": {
        "id": "7EcgAG3j0Jsr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tsne = TSNE()\n",
        "# transform the x- features\n",
        "X_embedded = tsne.fit_transform(train_test_data[:,:75])"
      ],
      "metadata": {
        "id": "cd2KXF-l0R2h",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cb562ff8-80d7-46e5-a2cd-6a91100cebb3"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/sklearn/manifold/_t_sne.py:780: FutureWarning: The default initialization in TSNE will change from 'random' to 'pca' in 1.2.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.8/dist-packages/sklearn/manifold/_t_sne.py:790: FutureWarning: The default learning rate in TSNE will change from 200.0 to 'auto' in 1.2.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# concanted with the y-label\n",
        "embedded_df = np.concatenate((X_embedded, docs_df.iloc[:,-1:]), axis=1)"
      ],
      "metadata": {
        "id": "6OnN2bln1Gpn"
      },
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# rename y-col\n",
        "embedded_df = pd.DataFrame(embedded_df)\n",
        "embedded_df.rename(columns={2: 'Category'}, inplace=True)"
      ],
      "metadata": {
        "id": "VOjZkPti1Rri"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# create plot\n",
        "plt.figure(figsize=(10, 10))\n",
        "sns.scatterplot(data=embedded_df, x=0, y=1, hue='Category')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 624
        },
        "id": "jsMpNt0Q11La",
        "outputId": "8c3e2260-b259-4eaf-bbe2-4e7ce553b4d8"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f1aa00111f0>"
            ]
          },
          "metadata": {},
          "execution_count": 53
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "It seems like our categories(belong to explaing AI(1), not belong to explaing Ai(0)), are not linearly separated."
      ],
      "metadata": {
        "id": "6WCSQ4kv4hWM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h3>K-cross validation<h3>"
      ],
      "metadata": {
        "id": "MkeVoSQL9G22"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# using k = 10\n",
        "kcv_list = k_cross_validation(x_features=pd.DataFrame(train_test_data[:,:75]), y_label=docs_df.iloc[:,-1:], k=10)"
      ],
      "metadata": {
        "id": "xz_g390u9KmL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "acdc5779-ba4b-4adc-9ce1-b03a3c3f6a64"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 0  1  2  3  4  5  6  7  8  9 10 11 13 14 15 16 17 18 20 21 22 23 24 25\n",
            " 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\n",
            " 50 51 52 53 54 55 56 58 60 61 62 63 65 66 67 68 69 71 72 73 74 75 76 77\n",
            " 78 79 80 82 83 84 85 87 89 90 91 92 93 94 95 97 98 99]\n",
            "[ 0  1  2  3  4  5  6  7  8  9 10 12 13 14 15 17 18 19 20 21 24 25 26 27\n",
            " 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\n",
            " 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 72 73 74 75 76 77\n",
            " 78 79 80 81 84 85 86 87 88 89 91 92 93 94 96 97 98 99]\n",
            "[ 0  1  2  3  4  5  6  8  9 10 11 12 15 16 17 18 19 21 22 23 24 25 26 27\n",
            " 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 45 46 47 48 49 50 51 52 53\n",
            " 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 75 76 78 80 81\n",
            " 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99]\n",
            "[ 0  1  2  3  4  7  8 11 12 13 14 15 16 17 19 20 21 22 23 24 25 26 27 28\n",
            " 29 30 31 32 33 34 35 36 38 39 40 41 42 43 44 45 46 47 48 50 51 52 54 55\n",
            " 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79\n",
            " 80 81 82 83 84 85 86 88 89 90 91 92 93 94 95 96 98 99]\n",
            "[ 0  1  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n",
            " 27 28 30 31 33 34 35 36 37 38 39 40 41 42 43 44 45 46 48 49 50 51 52 53\n",
            " 54 55 56 57 58 59 60 61 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78\n",
            " 79 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97]\n",
            "[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n",
            " 24 25 26 28 29 30 32 33 34 35 36 37 38 39 40 43 44 45 47 48 49 52 53 54\n",
            " 55 56 57 58 59 60 61 62 64 65 66 67 68 69 70 71 72 73 74 75 77 78 79 80\n",
            " 81 82 83 84 85 86 87 88 89 90 92 93 94 95 96 97 98 99]\n",
            "[ 1  2  3  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 22 23 24 25 26\n",
            " 27 28 29 31 32 36 37 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55\n",
            " 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79\n",
            " 80 81 82 83 85 86 87 88 89 90 91 93 94 95 96 97 98 99]\n",
            "[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 18 19 20 21 22 23 24\n",
            " 26 27 28 29 30 31 32 33 34 35 36 37 38 40 41 42 43 44 46 47 48 49 50 51\n",
            " 53 54 55 56 57 58 59 60 61 62 63 64 65 66 68 69 70 71 72 73 74 76 77 79\n",
            " 80 81 82 83 84 85 86 87 88 90 91 92 94 95 96 97 98 99]\n",
            "[ 0  2  3  4  5  6  7  9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 26\n",
            " 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 49 50 51\n",
            " 52 53 54 55 56 57 59 61 62 63 64 65 66 67 69 70 71 74 75 76 77 78 79 80\n",
            " 81 82 83 84 85 86 87 88 89 90 91 92 93 95 96 97 98 99]\n",
            "[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n",
            " 25 26 27 28 29 30 31 32 33 34 35 37 38 39 41 42 43 44 45 46 47 48 49 50\n",
            " 51 52 53 54 57 58 59 60 62 63 64 67 68 70 71 72 73 74 75 76 77 78 79 80\n",
            " 81 82 83 84 86 87 88 89 90 91 92 93 94 95 96 97 98 99]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h2>Applying classification models</h2>"
      ],
      "metadata": {
        "id": "jHIwLPjZ5lIc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h3>KNN</h3>"
      ],
      "metadata": {
        "id": "6keG5b3z5qsn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "best_classifier_knn = None\n",
        "best_accu_knn = 0\n",
        "best_x_test_knn = None\n",
        "best_y_test_knn = None\n",
        "\n",
        "for batch in kcv_list:\n",
        "  x_train = batch[0]\n",
        "  y_train = batch[1]\n",
        "  x_test = batch[2]\n",
        "  y_test = batch[3]\n",
        "  # normalize x-features\n",
        "  sc = StandardScaler()\n",
        "  x_train = sc.fit_transform(x_train)\n",
        "  x_test = sc.fit_transform(x_test)\n",
        "\n",
        "  knn = KNeighborsClassifier()\n",
        "\n",
        "  # define parameter grid\n",
        "  parameters_grid = {\n",
        "      'n_neighbors': [ 3, 5, 10],\n",
        "      'weights': ['uniform', 'distance']\n",
        "  }\n",
        "\n",
        "  # define grid search\n",
        "  grid_search = GridSearchCV(estimator=knn, param_grid=parameters_grid)\n",
        "\n",
        "\n",
        "  # fit estimator\n",
        "  grid_search.fit(x_train, y_train)\n",
        "\n",
        "  # get best estimator\n",
        "  best = grid_search.best_estimator_\n",
        "\n",
        "  # predict\n",
        "  y_pred = best.predict(x_test)\n",
        "\n",
        "\n",
        "  # calculate accuracy\n",
        "  acc = round(accuracy_score(y_test, y_pred), 3)\n",
        "\n",
        "  # update best classifier\n",
        "  if acc > best_accu_knn:\n",
        "    best_accu_knn = acc\n",
        "    best_classifier_knn = best\n",
        "    best_x_test_knn = x_test\n",
        "    best_y_test_knn = y_test"
      ],
      "metadata": {
        "id": "mPgv9VBh1-0Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "<H3>Evaluate the model</H3>"
      ],
      "metadata": {
        "id": "jD6c3Fz9XwwZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"KNN best classifier accuracy is {}\".format(best_accu_knn))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JI6N6nSCW-Vk",
        "outputId": "a07b6b35-a116-4d91-d01e-343b4800ad14"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "KNN best classifier accuracy is 0.8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# confusion matrix\n",
        "y_pred = best_classifier_knn.predict(best_x_test_knn)\n",
        "plot_confusion_matrix(best_classifier_knn, best_x_test_knn, best_y_test_knn)\n",
        "plt.show()\n",
        "\n",
        "tp, fn, fp, tn = confusion_matrix(best_y_test_knn, y_pred).ravel()\n",
        "eval_Df = {\"sensitivity\": tp/(tp+fn), \"specificity\": tn/(tn+fp)}\n",
        "pd.DataFrame(data=eval_Df, index=[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        },
        "id": "HPsuSXOaXnPF",
        "outputId": "8cbbbf9a-3c12-4f6b-ce56-c55411df94ed"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   sensitivity  specificity\n",
              "0     0.833333     0.750000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4a14d939-ef9c-439f-9c91-555cd8ac15a8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sensitivity</th>\n",
              "      <th>specificity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.833333</td>\n",
              "      <td>0.750000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4a14d939-ef9c-439f-9c91-555cd8ac15a8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4a14d939-ef9c-439f-9c91-555cd8ac15a8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4a14d939-ef9c-439f-9c91-555cd8ac15a8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h3>SVM</h3>"
      ],
      "metadata": {
        "id": "DRRFQoCxY626"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "best_classifier_SVM = None\n",
        "best_accu_SVM = 0\n",
        "best_x_test_SVM = None\n",
        "best_y_test_SVM = None\n",
        "\n",
        "for batch in kcv_list:\n",
        "  x_train = batch[0]\n",
        "  y_train = batch[1]\n",
        "  x_test = batch[2]\n",
        "  y_test = batch[3]\n",
        "  # normalize x-features\n",
        "  sc = StandardScaler()\n",
        "  x_train = sc.fit_transform(x_train)\n",
        "  x_test = sc.fit_transform(x_test)\n",
        "\n",
        "  clf = svm.SVC(random_state=RSEED)\n",
        "\n",
        "  # define parameter grid\n",
        "  parameters_grid = {\n",
        "      'C': [0.1, 0.5,0.7,1.2,1.5,20,40,60],\n",
        "      'kernel': ['linear', 'poly','rbf', 'sigmoid'],\n",
        "      'degree': [3,4],\n",
        "\n",
        "  }\n",
        "\n",
        "  # define grid search\n",
        "  grid_search = GridSearchCV(estimator=clf, param_grid=parameters_grid)\n",
        "\n",
        "\n",
        "\n",
        "  # fit estimator\n",
        "  grid_search.fit(x_train, y_train)\n",
        "\n",
        "  # get best estimator\n",
        "  best = grid_search.best_estimator_\n",
        "\n",
        "  # predict\n",
        "  y_pred = best.predict(x_test)\n",
        "\n",
        "\n",
        "  # calculate accuracy\n",
        "  acc = round(accuracy_score(y_test, y_pred), 3)\n",
        "\n",
        "  # update best classifier\n",
        "  if acc > best_accu_SVM:\n",
        "    best_accu_SVM = acc\n",
        "    best_classifier_SVM = best\n",
        "    best_x_test_SVM = x_test\n",
        "    best_y_test_SVM = y_test"
      ],
      "metadata": {
        "id": "4AUmFNDQY6eK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "<H3>Evaluate the model</H3>"
      ],
      "metadata": {
        "id": "vym6zlmsZx4f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"SVM best classifier accuracy is {}\".format(best_accu_SVM))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a-Hv_EMEZqS1",
        "outputId": "6d1ddb00-6699-416a-e981-44fef067f633"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SVM best classifier accuracy is 0.9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# confusion matrix\n",
        "y_pred = best_classifier_SVM.predict(best_x_test_SVM)\n",
        "plot_confusion_matrix(best_classifier_SVM, best_x_test_SVM, best_y_test_SVM)\n",
        "plt.show()\n",
        "\n",
        "tp, fn, fp, tn = confusion_matrix(best_y_test_SVM, y_pred).ravel()\n",
        "eval_Df = {\"sensitivity\": tp/(tp+fn), \"specificity\": tn/(tn+fp)}\n",
        "pd.DataFrame(data=eval_Df, index=[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        },
        "id": "7ZfwNK7baEbS",
        "outputId": "9f15404a-62e5-4283-83b6-6ed4f6b2a1c9"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   sensitivity  specificity\n",
              "0     0.800000     1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-91a61bae-64c3-4f91-a789-686512fb281b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sensitivity</th>\n",
              "      <th>specificity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.800000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-91a61bae-64c3-4f91-a789-686512fb281b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-91a61bae-64c3-4f91-a789-686512fb281b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-91a61bae-64c3-4f91-a789-686512fb281b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h3>Random Forest</h3>"
      ],
      "metadata": {
        "id": "IJPjiff9aoix"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "best_classifier_RF = None\n",
        "best_accu_RF = 0\n",
        "best_x_test_RF = None\n",
        "best_y_test_RF = None\n",
        "\n",
        "for batch in kcv_list:\n",
        "  x_train = batch[0]\n",
        "  y_train = batch[1]\n",
        "  x_test = batch[2]\n",
        "  y_test = batch[3]\n",
        "\n",
        "  # define model\n",
        "  rf = RandomForestClassifier(random_state=RSEED)\n",
        "\n",
        "  # define parameter grid\n",
        "  parameters_grid = {\n",
        "      'max_depth': [2, 3, 4, 6],\n",
        "      'min_samples_split': [2, 4, 8],\n",
        "      'min_samples_leaf': [2, 8],\n",
        "      'n_estimators': [50,70,100]\n",
        "  }\n",
        "   # define grid search\n",
        "  grid_search = GridSearchCV(estimator=rf, param_grid=parameters_grid)\n",
        "\n",
        "\n",
        "\n",
        "  # fit estimator\n",
        "  grid_search.fit(x_train, y_train)\n",
        "\n",
        "  # get best estimator\n",
        "  best = grid_search.best_estimator_\n",
        "\n",
        "  # predict\n",
        "  y_pred = best.predict(x_test)\n",
        "\n",
        "\n",
        "  # calculate accuracy\n",
        "  acc = round(accuracy_score(y_test, y_pred), 3)\n",
        "\n",
        "  # update best classifier\n",
        "  if acc > best_accu_RF:\n",
        "    best_accu_RF = acc\n",
        "    best_classifier_RF = best\n",
        "    best_x_test_RF = x_test\n",
        "    best_y_test_RF = y_test"
      ],
      "metadata": {
        "id": "SQWuJn07al59"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h3>Evaluate the model</h3>"
      ],
      "metadata": {
        "id": "Lc2mttBAc8Oo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Random forest best classifier accuracy is {}\".format(best_accu_RF))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dtVu_F1bc7ka",
        "outputId": "6626fef2-3920-4265-9360-f2b347ef6e24"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random forest best classifier accuracy is 1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# confusion matrix\n",
        "y_pred = best_classifier_RF.predict(best_x_test_RF)\n",
        "plot_confusion_matrix(best_classifier_RF, best_x_test_RF, best_y_test_RF)\n",
        "plt.show()\n",
        "\n",
        "tp, fn, fp, tn = confusion_matrix(best_y_test_RF, y_pred).ravel()\n",
        "eval_Df = {\"sensitivity\": tp/(tp+fn), \"specificity\": tn/(tn+fp)}\n",
        "pd.DataFrame(data=eval_Df, index=[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        },
        "id": "uT1s5aWIdp9J",
        "outputId": "b147e8c0-78e5-4e69-fd8b-3e4373f079dc"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   sensitivity  specificity\n",
              "0     1.000000     1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-08f240da-fb4a-46a6-bdfd-fbd845ab114a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sensitivity</th>\n",
              "      <th>specificity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-08f240da-fb4a-46a6-bdfd-fbd845ab114a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-08f240da-fb4a-46a6-bdfd-fbd845ab114a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-08f240da-fb4a-46a6-bdfd-fbd845ab114a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h3>Navie Bayes</h3>"
      ],
      "metadata": {
        "id": "N1sLCF6Fd1ec"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "best_classifier_NB = None\n",
        "best_accu_NB = 0\n",
        "best_x_test_NB = None\n",
        "best_y_test_NB = None\n",
        "\n",
        "for batch in kcv_list:\n",
        "  x_train = batch[0]\n",
        "  y_train = batch[1]\n",
        "  x_test = batch[2]\n",
        "  y_test = batch[3]\n",
        "\n",
        "  # define parameter grid\n",
        "  param_grid_nb = {\n",
        "    'var_smoothing': np.logspace(0,-9, num=100)\n",
        "  }\n",
        "\n",
        "  # define and train the model\n",
        "  grid_search = GridSearchCV(estimator=GaussianNB(), param_grid=param_grid_nb, verbose=1, n_jobs=-1)\n",
        "  grid_search.fit(x_train, y_train)\n",
        "\n",
        "  # get best estimator\n",
        "  best = grid_search.best_estimator_\n",
        "\n",
        "  # predict\n",
        "  y_pred = best.predict(x_test)\n",
        "\n",
        "\n",
        "  # calculate accuracy\n",
        "  acc = round(accuracy_score(y_test, y_pred), 3)\n",
        "\n",
        "  # update best classifier\n",
        "  if acc > best_accu_NB:\n",
        "    best_accu_NB = acc\n",
        "    best_classifier_NB = best\n",
        "    best_x_test_NB = x_test\n",
        "    best_y_test_NB = y_test"
      ],
      "metadata": {
        "id": "kFsAyembd0tt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h3>Evaluate the model</h3>"
      ],
      "metadata": {
        "id": "CsZIb80yfwcS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Navie Bayes best classifier accuracy is {}\".format(best_accu_NB))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ol62VreSfv2r",
        "outputId": "34abca9c-f622-4091-9a17-026b43d8f90f"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Navie Bayes best classifier accuracy is 1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# confusion matrix\n",
        "y_pred = best_classifier_NB.predict(best_x_test_NB)\n",
        "plot_confusion_matrix(best_classifier_NB, best_x_test_NB, best_y_test_NB)\n",
        "plt.show()\n",
        "\n",
        "tp, fn, fp, tn = confusion_matrix(best_y_test_NB, y_pred).ravel()\n",
        "eval_Df = {\"sensitivity\": tp/(tp+fn), \"specificity\": tn/(tn+fp)}\n",
        "pd.DataFrame(data=eval_Df, index=[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        },
        "id": "DQK2jeyUf4ET",
        "outputId": "e52b4b44-8adf-4fd9-98c6-1e25b28c645d"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   sensitivity  specificity\n",
              "0     1.000000     1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-353d36e7-98a7-49ba-abc6-6f6137430c9f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sensitivity</th>\n",
              "      <th>specificity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-353d36e7-98a7-49ba-abc6-6f6137430c9f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-353d36e7-98a7-49ba-abc6-6f6137430c9f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-353d36e7-98a7-49ba-abc6-6f6137430c9f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h3>Summery</h3>\n",
        "Overall it seems that most of the classifiers managed to learn well from<br>\n",
        "our representaion of the data and achived high accuracy, yet both the KNN and SVM classifiers made mistakes(knn with acurracy-0.8 and SVM with acurracy-0.9).\n",
        "As we have seen the in the T-SNE visualization in 2D the classes are not linearly seperable, therefor it is possible that in higher dimension of 60(which we perform the calculations on) the classes also  not seperable.<br>\n",
        "Therefore models like SVM and KNN that their peroformance highly impacted by,<br>  classes that are not linearly separable will performe worser in those cases.\n",
        "<br>\n",
        "The random forest and Naive bayse managed to achive the best accuracy(1.0)."
      ],
      "metadata": {
        "id": "hop-3Lq8gBoG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# saving the best classifiers of all the 4 models\n",
        "joblib.dump(best_classifier_knn, '../TrainedClassificationModels/KNN_classifier.pkl')\n",
        "joblib.dump(best_classifier_SVM, '../TrainedClassificationModels/SVM_classifier.pkl')\n",
        "joblib.dump(best_classifier_RF, '../TrainedClassificationModels/RF_classifier.pkl')\n",
        "joblib.dump(best_classifier_NB, '../TrainedClassificationModels//NB_classifier.pkl')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_a87KJjvg7ZI",
        "outputId": "52dad4f4-72ab-430c-94f2-2582567792dc"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['/content/drive/MyDrive/Colab Notebooks//NB_classifier.pkl']"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    }
  ]
}